plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'maven'
    id 'signing'
    id 'net.minecrell.licenser' version '0.4'
    id 'me.champeau.gradle.jmh' version '0.4.7'
    id 'org.jetbrains.kotlin.jvm' version '1.2.61'
}

// Basic project information
group = 'org.lanternpowered'
archivesBaseName = project.name.toLowerCase()
version = '1.0.1-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

defaultTasks 'licenseFormat', 'build'

repositories {
    mavenCentral()
}

dependencies {
    // Compile dependencies
    compile 'org.ow2.asm:asm:6.2.1'

    // Optional dependencies
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compileOnly 'com.google.guava:guava:26.0-jre'

    // Testing
    testCompile 'org.junit.jupiter:junit-jupiter-engine:5.2.0'

    // JMH benchmarks
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.21'
}

jmh {
    duplicateClassesStrategy 'warn'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile)*.kotlinOptions {
    jvmTarget = '1.8'
}

jar {
    classifier = ''
    exclude '**/*.java' // For module-info.java
}

task javadocJar(type: Jar) {
    classifier 'javadoc'
    from javadoc
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    exclude '**/*.class' // For module-info.class
}

assemble.dependsOn sourceJar
assemble.dependsOn javadocJar

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

////////////////////////////
/// License and headers. ///
////////////////////////////

// Add the license file to all the jars
[jar, javadocJar, sourceJar]*.from file('LICENSE.txt')

// License header plugin
license {
    header file('HEADER.txt')
    include '**/*.java'
    include '**/*.kt'

    newLine false
    ignoreFailures false

    ext {
        name = project.name
        url = 'https://www.lanternpowered.org'
        organization = 'LanternPowered'
    }
}

def snapshot = project.version.endsWith('-SNAPSHOT')

signing {
    required { !snapshot && gradle.taskGraph.hasTask(':uploadArchives') && project.hasProperty('signing.keyId') }
    sign configurations.archives
}

if (project.hasProperty('sonatypeUsername') &&
        project.hasProperty('sonatypePassword')) {
    uploadArchives {
        enabled = System.getenv('TRAVIS') == null || snapshot

        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    description 'A lambda generation library'
                    name project.name
                    url 'https://github.com/LanternPowered/Lmbda'
                    inceptionYear '2018'

                    developers {
                        developer {
                            id 'Cybermaxke'
                            name 'Seppe Volkaerts'
                            email 'contact@seppevolkaerts.be'
                        }
                    }

                    issueManagement {
                        system 'GitHub Issues'
                        url 'https://github.com/LanternPowered/Lmbda/issues'
                    }

                    licenses {
                        license {
                            name 'MIT License'
                            url 'https://opensource.org/licenses/MIT'
                        }
                    }

                    scm {
                        connection 'scm:git@github.com:LanternPowered/Lmbda.git'
                        developerConnection 'scm:git@github.com:LanternPowered/Lmbda.git'
                        url 'https://github.com/LanternPowered/Lmbda'
                    }
                }
            }
        }
    }
}

////////////////////////////////////
/// Gradle Wrapper update tasks. ///
////////////////////////////////////

// Gradle version used for generating the Gradle wrapper
wrapper {
    gradleVersion = '4.10'
}

// A custom update wrapper task, using a custom task prevents
// intellij from updating the wrapper constantly through
// the wrapper task
task updateWrapper(dependsOn: wrapper)

gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
    // Only enable the wrapper task if the updateWrapper task is run
    wrapper.enabled = graph.allTasks.contains(updateWrapper)
}
