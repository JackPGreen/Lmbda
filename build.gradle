plugins {
    id 'net.minecrell.licenser' version '0.4'
    id 'me.champeau.gradle.jmh' version '0.4.7'
    id 'org.jetbrains.kotlin.jvm' version '1.2.61'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

// Basic project information
group = 'org.lanterpowered'
archivesBaseName = project.name.toLowerCase()
version = 'dev-SNAPSHOT'

defaultTasks 'licenseFormat', 'build'

repositories {
    mavenCentral()
}

dependencies {
    // Compile dependencies
    compile 'org.ow2.asm:asm:6.2.1'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // Testing
    testCompile 'org.junit.jupiter:junit-jupiter-engine:5.2.0'

    // JMH benchmarks
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.21'
}

jmh {
    duplicateClassesStrategy = 'warn'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile)*.kotlinOptions {
    jvmTarget = '1.8'
}

jar {
    classifier = ''
}

// Process the resource files
processResources {
    // Include the license file
    from 'LICENSE.txt'
}

task sourceJar(type: Jar) {
    classifier = 'sources'

    // Include all the source
    from sourceSets.main.allSource
    // And the license file
    from file('LICENSE.txt')
}
assemble.dependsOn sourceJar

artifacts {
    archives jar
    archives sourceJar
}

license {
    header file('HEADER.txt')
    include '**/*.java'
    include '**/*.kt'

    newLine false
    ignoreFailures false

    ext {
        name = project.name
        url = 'https://www.lanternpowered.org'
        organization = 'LanternPowered'
    }
}

////////////////////////////////////
/// Gradle Wrapper update tasks. ///
////////////////////////////////////

// Gradle version used for generating the Gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}

// A custom update wrapper task, using a custom task prevents
// intellij from updating the wrapper constantly through
// the wrapper task
task updateWrapper(dependsOn: wrapper)

gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
    // Only enable the wrapper task if the updateWrapper task is run
    wrapper.enabled = graph.allTasks.contains(updateWrapper)
}
